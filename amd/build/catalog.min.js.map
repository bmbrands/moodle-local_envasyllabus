{"version":3,"file":"catalog.min.js","sources":["../src/catalog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the enva syllabus catalog page.\n *\n * @package    local_envasyllabus\n * @copyright  2022 CALL Learning <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from './repository';\nimport {exception as displayException} from 'core/notification';\nimport Templates from \"core/templates\";\nimport Config from 'core/config';\n\n/**\n * Initialise catalog\n *\n * @param catalogTagId\n */\nexport const init = (catalogTagId) => {\n    const catalogNode = document.getElementById(catalogTagId);\n    const catalogCourseTag = catalogNode.querySelector('.catalog-courses');\n    const coursesIds = JSON.parse(catalogCourseTag.dataset.courses);\n    repository.getCoursesFromIds(coursesIds).then((data) => renderCourses(catalogNode, data.courses)).catch(displayException);\n};\n\n/**\n * Render all courses\n *\n * @param element element to render into\n * @param courses list of courses with data\n */\nconst renderCourses = (element, courses) => {\n    Templates.render('local_envasyllabus/catalog_course_categories', {\n        sortedCourses: sortCoursesByYearAndSemester(courses)\n    }).then((html, js) => {\n        Templates.replaceNodeContents(element, html, js);\n    }).catch(displayException);\n};\n\n/**\n * Sort courses by year and semester\n *\n * @param courses courses\n * @returns Array\n */\nconst sortCoursesByYearAndSemester = (courses) => {\n    let sortedCourses = {};\n    for(let course of courses.values()) {\n        const yearValue = findValueForCustomField(course, 'uc_annee');\n        const semesterValue = findValueForCustomField(course, 'uc_semestre');\n        if (yearValue) {\n            if (!sortedCourses.hasOwnProperty(yearValue)) {\n                sortedCourses[yearValue] = {\n                    year: yearValue,\n                    semesters: []\n                };\n            }\n            if (semesterValue) {\n                if (!sortedCourses[yearValue].semesters[semesterValue]) {\n                    sortedCourses[yearValue].semesters[semesterValue] = {\n                        semester: semesterValue,\n                        year: yearValue,\n                        courses: []\n                    };\n                }\n                if (course.overviewfiles && course.overviewfiles.length > 0) {\n                    // Hack here: We just want to change from webservice url that need a token.\n                    // to a simple url for a plugin.\n                    course.courseimageurl = course.overviewfiles[0].fileurl.replace('/webservice', '');\n                }\n                course.viewurl = Config.wwwroot + '/course/view.php?id=' + course.id;\n                sortedCourses[yearValue].semesters[semesterValue].courses.push(course);\n            }\n        }\n    }\n    // Flattern the object into an array.\n    return Object.values(sortedCourses).map(\n        yearDef => {\n            return {\n                year: yearDef.year,\n                semesters: Object.values(yearDef.semesters)\n            };\n        }\n    );\n};\n\n/**\n * Retrieve the value of a give customfield from course data\n *\n * @param course course data\n * @param cfsname shortname for customfield\n * @param defaultValue\n * @returns null|Object|int|String\n */\nconst findValueForCustomField = (course, cfsname, defaultValue=null) => {\n    if (typeof course.customfields !== 'undefined') {\n        for (let cf of course.customfields.values()) {\n            if (cf.shortname === cfsname) {\n                return cf.value;\n            }\n        }\n    }\n    return defaultValue;\n};"],"names":["catalogTagId","catalogNode","document","getElementById","catalogCourseTag","querySelector","coursesIds","JSON","parse","dataset","courses","repository","getCoursesFromIds","then","data","renderCourses","catch","displayException","element","render","sortedCourses","sortCoursesByYearAndSemester","html","js","replaceNodeContents","values","course","yearValue","findValueForCustomField","semesterValue","hasOwnProperty","year","semesters","semester","overviewfiles","length","courseimageurl","fileurl","replace","viewurl","Config","wwwroot","id","push","Object","map","yearDef","cfsname","defaultValue","customfields","cf","shortname","value"],"mappings":"u3FAiCoB,SAACA,kBACXC,YAAcC,SAASC,eAAeH,cACtCI,iBAAmBH,YAAYI,cAAc,oBAC7CC,WAAaC,KAAKC,MAAMJ,iBAAiBK,QAAQC,SACvDC,WAAWC,kBAAkBN,YAAYO,MAAK,SAACC,aAASC,cAAcd,YAAaa,KAAKJ,YAAUM,MAAMC,8BAStGF,cAAgB,SAACG,QAASR,4BAClBS,OAAO,+CAAgD,CAC7DC,cAAeC,6BAA6BX,WAC7CG,MAAK,SAACS,KAAMC,uBACDC,oBAAoBN,QAASI,KAAMC,OAC9CP,MAAMC,0BASPI,6BAA+B,SAACX,mBAC9BU,cAAgB,wCACFV,QAAQe,6DAAU,KAA5BC,mBACEC,UAAYC,wBAAwBF,OAAQ,YAC5CG,cAAgBD,wBAAwBF,OAAQ,eAClDC,YACKP,cAAcU,eAAeH,aAC9BP,cAAcO,WAAa,CACvBI,KAAMJ,UACNK,UAAW,KAGfH,gBACKT,cAAcO,WAAWK,UAAUH,iBACpCT,cAAcO,WAAWK,UAAUH,eAAiB,CAChDI,SAAUJ,cACVE,KAAMJ,UACNjB,QAAS,KAGbgB,OAAOQ,eAAiBR,OAAOQ,cAAcC,OAAS,IAGtDT,OAAOU,eAAiBV,OAAOQ,cAAc,GAAGG,QAAQC,QAAQ,cAAe,KAEnFZ,OAAOa,QAAUC,gBAAOC,QAAU,uBAAyBf,OAAOgB,GAClEtB,cAAcO,WAAWK,UAAUH,eAAenB,QAAQiC,KAAKjB,oEAKpEkB,OAAOnB,OAAOL,eAAeyB,KAChC,SAAAC,eACW,CACHf,KAAMe,QAAQf,KACdC,UAAWY,OAAOnB,OAAOqB,QAAQd,gBAc3CJ,wBAA0B,SAACF,OAAQqB,aAASC,oEAAa,aACxB,IAAxBtB,OAAOuB,aAA8B,kDAC7BvB,OAAOuB,aAAaxB,gEAAU,KAApCyB,mBACDA,GAAGC,YAAcJ,eACVG,GAAGE,mEAIfJ"}