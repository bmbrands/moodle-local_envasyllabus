{"version":3,"file":"catalog.min.js","sources":["../src/catalog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the enva syllabus catalog page.\n *\n * @copyright  2022 CALL Learning <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from './repository';\nimport {exception as displayException} from 'core/notification';\nimport Templates from \"core/templates\";\nimport Config from 'core/config';\n\n/**\n * Initialise catalog\n *\n * @param {int} catalogTagId\n */\nexport const init = (catalogTagId) => {\n    // TODO: take the initial filter from the form.\n    refreshCoursesList(catalogTagId, {\n        sort: {\n            field: 'fullname',\n            order: 'asc'\n        }\n    });\n    document.addEventListener('enva-syllabus-catalog-filter', (eventData) => {\n        if (eventData.detail) {\n            refreshCoursesList(catalogTagId, eventData.detail);\n        }\n    });\n};\n\nconst refreshCoursesList = (catalogTagId, filterParams = {}) => {\n    const catalogNode = document.getElementById(catalogTagId);\n    const catalogCourseTag = catalogNode.querySelector('.catalog-courses');\n    const rootCategoryId = JSON.parse(catalogCourseTag.dataset.categoryRootId);\n    const currentLang = catalogCourseTag.dataset.currentLang;\n    repository.getCoursesForCategoryId(rootCategoryId, filterParams, currentLang).then(\n        (courses) => renderCourses(catalogCourseTag, courses)).catch(displayException);\n};\n/**\n * Render all courses\n *\n * @param {Object} element element to render into\n * @param {Array} courses list of courses with data\n */\nconst renderCourses = (element, courses) => {\n    Templates.render('local_envasyllabus/catalog_course_categories', {\n        sortedCourses: buildCourseList(courses)\n    }).then((html, js) => {\n        Templates.replaceNodeContents(element, html, js);\n    }).catch(displayException);\n};\n\n/**\n * Sort courses by year and semester\n *\n * Also tweaks the display depending on language selected\n * @param {Array} courses\n * @returns {{year: *, semesters: *}[]}\n */\nconst buildCourseList = (courses) => {\n    let sortedCourses = {};\n    for (let course of courses.values()) {\n        const yearValue = findValueForCustomField(course, 'uc_annee');\n        const semesterValue = findValueForCustomField(course, 'uc_semestre');\n        if (yearValue) {\n            if (!sortedCourses.hasOwnProperty(yearValue)) {\n                sortedCourses[yearValue] = {\n                    year: yearValue,\n                    semesters: []\n                };\n            }\n            if (!sortedCourses[yearValue].semesters[semesterValue]) {\n                sortedCourses[yearValue].semesters[semesterValue] = {\n                    semester: semesterValue,\n                    year: yearValue,\n                    courses: []\n                };\n            }\n            if (course.customfields) {\n                course.cf = {};\n                course.customfields.forEach((cf) => {\n                    course.cf[cf.shortname] = cf;\n                });\n            }\n            course.viewurl = Config.wwwroot + '/course/view.php?id=' + course.id;\n            course.syllabusurl = Config.wwwroot + '/local/envasyllabus/syllabuspage.php?id=' + course.id;\n            sortedCourses[yearValue].semesters[semesterValue].courses.push(course);\n        }\n    }\n    // Flattern the object into an array.\n    return Object.entries(sortedCourses)\n        // Preserve the order of the years as Object.entries does not.\n        .sort((y1, y2) => y1[0].localeCompare(y2[0]))\n        .map(\n            ([, yearDef]) => {\n                // Always sort by semesters.\n                const sortedSemesters = Object.keys(yearDef.semesters)\n                    .sort()\n                    .reduce((acc, key) => {\n                        acc[key] = yearDef.semesters[key];\n                        return acc;\n                    }, {});\n\n                return {\n                    year: yearDef.year,\n                    semesters: Object.values(sortedSemesters)\n                };\n            }\n        );\n};\n\n/**\n * Retrieve the value of a give customfield from course data\n *\n * @param {Object} course course data\n * @param {string} cfsname shortname for customfield\n * @param {null|Object|int|String} defaultValue\n * @returns null|Object|int|String\n */\nconst findValueForCustomField = (course, cfsname, defaultValue = null) => {\n    if (typeof course.customfields !== 'undefined') {\n        for (let cf of course.customfields.values()) {\n            if (cf.shortname === cfsname) {\n                return cf.value;\n            }\n        }\n    }\n    return defaultValue;\n};\n"],"names":["catalogTagId","refreshCoursesList","sort","field","order","document","addEventListener","eventData","detail","filterParams","catalogNode","getElementById","catalogCourseTag","querySelector","rootCategoryId","JSON","parse","dataset","categoryRootId","currentLang","repository","getCoursesForCategoryId","then","courses","renderCourses","catch","displayException","element","render","sortedCourses","buildCourseList","html","js","replaceNodeContents","course","values","yearValue","findValueForCustomField","semesterValue","hasOwnProperty","year","semesters","semester","customfields","cf","forEach","shortname","viewurl","Config","wwwroot","id","syllabusurl","push","Object","entries","y1","y2","localeCompare","map","_ref","yearDef","sortedSemesters","keys","reduce","acc","key","cfsname","defaultValue","value"],"mappings":";;;;;;sHAgCqBA,eAEjBC,mBAAmBD,aAAc,CAC7BE,KAAM,CACFC,MAAO,WACPC,MAAO,SAGfC,SAASC,iBAAiB,gCAAiCC,YACnDA,UAAUC,QACVP,mBAAmBD,aAAcO,UAAUC,kBAKjDP,mBAAqB,SAACD,kBAAcS,oEAAe,SAC/CC,YAAcL,SAASM,eAAeX,cACtCY,iBAAmBF,YAAYG,cAAc,oBAC7CC,eAAiBC,KAAKC,MAAMJ,iBAAiBK,QAAQC,gBACrDC,YAAcP,iBAAiBK,QAAQE,YAC7CC,WAAWC,wBAAwBP,eAAgBL,aAAcU,aAAaG,MACzEC,SAAYC,cAAcZ,iBAAkBW,WAAUE,MAAMC,0BAQ/DF,cAAgB,CAACG,QAASJ,8BAClBK,OAAO,+CAAgD,CAC7DC,cAAeC,gBAAgBP,WAChCD,MAAK,CAACS,KAAMC,yBACDC,oBAAoBN,QAASI,KAAMC,OAC9CP,MAAMC,0BAUPI,gBAAmBP,cACjBM,cAAgB,OACf,IAAIK,UAAUX,QAAQY,SAAU,OAC3BC,UAAYC,wBAAwBH,OAAQ,YAC5CI,cAAgBD,wBAAwBH,OAAQ,eAClDE,YACKP,cAAcU,eAAeH,aAC9BP,cAAcO,WAAa,CACvBI,KAAMJ,UACNK,UAAW,KAGdZ,cAAcO,WAAWK,UAAUH,iBACpCT,cAAcO,WAAWK,UAAUH,eAAiB,CAChDI,SAAUJ,cACVE,KAAMJ,UACNb,QAAS,KAGbW,OAAOS,eACPT,OAAOU,GAAK,GACZV,OAAOS,aAAaE,SAASD,KACzBV,OAAOU,GAAGA,GAAGE,WAAaF,OAGlCV,OAAOa,QAAUC,gBAAOC,QAAU,uBAAyBf,OAAOgB,GAClEhB,OAAOiB,YAAcH,gBAAOC,QAAU,2CAA6Cf,OAAOgB,GAC1FrB,cAAcO,WAAWK,UAAUH,eAAef,QAAQ6B,KAAKlB,gBAIhEmB,OAAOC,QAAQzB,eAEjB3B,MAAK,CAACqD,GAAIC,KAAOD,GAAG,GAAGE,cAAcD,GAAG,MACxCE,KACGC,YAAIC,oBAEMC,gBAAkBR,OAAOS,KAAKF,QAAQnB,WACvCvC,OACA6D,QAAO,CAACC,IAAKC,OACVD,IAAIC,KAAOL,QAAQnB,UAAUwB,KACtBD,MACR,UAEA,CACHxB,KAAMoB,QAAQpB,KACdC,UAAWY,OAAOlB,OAAO0B,sBAcvCxB,wBAA0B,SAACH,OAAQgC,aAASC,oEAAe,aAC1B,IAAxBjC,OAAOS,iBACT,IAAIC,MAAMV,OAAOS,aAAaR,YAC3BS,GAAGE,YAAcoB,eACVtB,GAAGwB,aAIfD"}